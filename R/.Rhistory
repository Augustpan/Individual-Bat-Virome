table(virus_stat$is_multi_host_s, virus_stat$virus_family)
glm(is_multi_host_s ~ virus_family, family="binomial", data=virus_stat)
glm(is_multi_host_s ~ virus_family, family="binomial", data=virus_stat) %>% summary()
f = glm(is_multi_host_s ~ virus_family, family="binomial", data=virus_stat)
sjPlot::plot_model(f)
table(virus_stat$is_multi_host_s, virus_stat$virus_family)
source("~/Documents/GitHub/Bat_Infectome/R/eval_CST.R")
virus_stat
vtable %>%
left_join(select(lib_meta, lib_id, species), by="lib_id") %>%
select(-lib_id) %>%
group_by(species) %>%
summarise_all(function(x) {ifelse(sum(x)>0, 1, 0)})
x = vtable %>%
left_join(select(lib_meta, lib_id, species), by="lib_id") %>%
select(-lib_id) %>%
group_by(species) %>%
summarise_all(function(x) {ifelse(sum(x)>0, 1, 0)})
View(x)
x = vtable %>%
left_join(select(lib_meta, lib_id, species), by="lib_id") %>%
select(-lib_id) %>%
group_by(species) %>%
summarise_all(function(x) {ifelse(sum(x)>0, sum(x), 0)})
View(x)
vtable %>%
left_join(select(lib_meta, lib_id, species), by="lib_id") %>%
select(-lib_id) %>%
group_by(species)
vtable
x = vtable %>%
left_join(select(lib_meta, lib_id, species), by="lib_id") %>%
select(-lib_id) %>%
group_by(species) %>%
summarise_all(function(x) {ifelse(sum(x)>0, 1, 0)})
x = vtable %>%
left_join(select(lib_meta, lib_id, species), by="lib_id") %>%
select(-lib_id) %>%
group_by(species) %>%
summarise_all(function(x) {ifelse(sum(x)>0, 1, 0)})
x = vtable %>%
left_join(select(lib_meta, lib_id, species), by="lib_id") %>%
select(-lib_id) %>%
group_by(species) %>%
summarise_all(function(x) {ifelse(sum(x)>0, 1, 0)})
x = vtable %>%
left_join(select(lib_meta, lib_id, species), by="lib_id") %>%
select(-lib_id)
x
x = vtable %>%
left_join(select(lib_meta, lib_id, species), by="lib_id") %>%
select(-lib_id) %>% mutate(across(-species, function(x) {ifelse(x>0, 1, 0)})) %>%
group_by(species) %>%
summarise_all(function(x) {ifelse(sum(x)>0, sum(x), 0)})
View(x)
num_host_species = vtable %>%
left_join(select(lib_meta, lib_id, species), by="lib_id") %>%
select(-lib_id) %>%
mutate(across(-species, function(x) {ifelse(x>0, 1, 0)})) %>%
group_by(species) %>%
summarise_all(function(x) {ifelse(sum(x)>0, 1, 0)}) %>%
select(-species) %>%
colSums()
num_host_genus = vtable %>%
left_join(select(lib_meta, lib_id, genus), by="lib_id") %>%
select(-lib_id) %>%
mutate(across(-species, function(x) {ifelse(x>0, 1, 0)})) %>%
group_by(genus) %>%
summarise_all(function(x) {ifelse(sum(x)>0, 1, 0)}) %>%
select(-genus) %>%
colSums()
virus_stat = tibble(
virus_name = names(num_host_species),
num_host_species = num_host_species,
num_host_genus = num_host_genus,
is_multi_host_s = num_host_species > 1,
is_multi_host_g = num_host_genus > 1
) %>%
left_join(vmeta, by="virus_name")
write_csv(virus_stat, "../output/virus_stat.csv")
virus_stat
vh_g = vtable %>%
left_join(lib_meta, by="lib_id") %>%
select(species, all_of(virus_name_arr)) %>%
pivot_longer(cols=all_of(virus_name_arr), names_to="virus_name", values_to="RPM") %>%
filter(RPM > 0) %>%
select(-RPM) %>%
table() %>%
as.matrix() %>%
graph.incidence(weighted = NULL)
plot(vh_g)
vh_g = vtable %>%
left_join(lib_meta, by="lib_id") %>%
select(species, all_of(virus_name_arr)) %>%
pivot_longer(cols=all_of(virus_name_arr), names_to="virus_name", values_to="RPM") %>%
filter(RPM > 0) %>%
select(-RPM) %>%
table() %>%
as.matrix() %>%
graph.incidence(weighted = T)
plot(vh_g)
vh_g
W(vh_g)
weights(vh_g)
vh_g
vtable %>%
left_join(lib_meta, by="lib_id") %>%
select(species, all_of(virus_name_arr)) %>%
pivot_longer(cols=all_of(virus_name_arr), names_to="virus_name", values_to="RPM") %>%
filter(RPM > 0) %>%
select(-RPM) %>%
table() %>%
as.matrix()
get.adjacency(vh_g)
g = vh_g
g
E(g)$weight
plot(vh_g, vertex.color=cm[vm$virus_of_concern], vertex.label=vm$virus_name_abbr, vertex.size=8)
plot(vh_g, vertex.color=cm[vm$virus_of_concern], vertex.label=vm$virus_name_abbr, vertex.size=8, edge.width=E(g)$weight)
E(g)
e=E(g)
a=E(g)
a$
node
vertex(a)
vertex(a)[[1]]
e
tibble(e=E(g),w=E(g)$weight)
edge_attr(g)
names(a)
names(g)
V(g)
E(g)
names(E(g))
E(g)[1]
E(g)[2]
E(g)[3]
as.character(E(g))
as_edgelist(g)
cbind(as_edgelist(g), E(g)$weight)
cbind(as_edgelist(g), E(g)$weight) %>% write_csv("../edge_weight.csv")
cbind(as_edgelist(g), E(g)$weight) %>% as.tibble() %>% write_csv("../edge_weight.csv")
source("~/Documents/GitHub/Bat_Infectome/R/eval_CST.R")
source("~/Documents/GitHub/Bat_Infectome/R/eval_beta_diversity.R")
source("~/Documents/GitHub/Bat_Infectome/R/eval_beta_diversity.R")
site_xy
site_dist
host_tree
host_tree_COI
mantel(VirusDist ~ SiteDist + HostDist + TimeDist, data=tmp_data, mrank=T)
mantel(bc_virus ~ hd + s_d + td, mrank=T)
mantel(bc_virus ~ hd, mrank=T)
mantel(bc_virus ~ as.dist(hd), mrank=T)
mantel(as.dist(bc_virus) ~ as.dist(hd), mrank=T)
library(tidyverse)
library(vegan)
library(ecodist)
vtable = read_csv("../generated_data/virus_table_filtered.csv") %>%
select_if(function(x) { ifelse(is.character(x), T, sum(x)>0)}) # drop empty columns
vmeta = read_csv("../raw_data/virus_meta.csv")
lib_meta = read_csv("../raw_data/lib_metadata.csv")
virus_name_arr = colnames(select(vtable, -lib_id))
lib_id_arr = vtable$lib_id
vmat = t(select(vtable, all_of(virus_name_arr)))
colnames(vmat) = vtable$lib_id
nonempty_libs = names(which(colSums(vmat)>0))
vmat_ne = vmat[,nonempty_libs]
vmat_vegan = t(vmat_ne)
pcoa = cmdscale(vegdist(vmat_vegan, method="bray"), eig=T, k=3)
host_genus = filter(lib_meta, lib_id %in% nonempty_libs)$genus
sample_site = filter(lib_meta, lib_id %in% nonempty_libs)$site
sample_year = filter(lib_meta, lib_id %in% nonempty_libs)$year
# draw PCoA
ggplot() +
geom_point(aes(x=pcoa$points[,1] , y=pcoa$points[,2], color=host_genus, shape=sample_site), size=4) +
xlab(paste0("PcoA1 (", round(pcoa$eig[1]/sum(pcoa$eig) * 1000) /10, "%)")) +
ylab(paste0("PCoA2 (", round(pcoa$eig[2]/sum(pcoa$eig) * 1000) /10, "%)")) +
theme_bw()
ggsave("../output/virus_pcoa.pdf", width=6.24, height=4.58)
# perform PERMANOVA
dbrda_fit = dbrda(vmat_vegan ~ sample_site + host_genus + sample_year, distance = "bray")
anova(dbrda_fit, by="margin") %>%
capture.output(file="../output/dbRDA_bray_marginal_effect.txt")
anova(dbrda_fit, by="term") %>%
capture.output(file="../output/dbRDA_bray_type_I_SS.txt")
# perform Mantel test
site_loc = read_csv("../raw_data/geo_locations.csv") %>%
select(-site_name) %>%
as.data.frame()
rownames(site_loc) = site_loc$site
site_loc$site = NULL
site_xy = SoDA::geoXY(site_loc$lat, site_loc$lon, unit=1000) # unit=km
rownames(site_xy) = rownames(site_loc)
site_dist = as.matrix(dist(site_xy))
host_tree = ape::read.tree("../raw_data/bat_tree.nwk")
host_dist = cophenetic(host_tree)/2
host_tree_COI = ape::read.tree("../generated_data/bat_tree_COI_gene.txt")
host_dist_COI = cophenetic(host_tree_COI)
time_dist = as.matrix(dist(lib_meta$year))
rownames(time_dist) = lib_meta$lib_id
colnames(time_dist) = lib_meta$lib_id
bc_virus = bcdist(vmat_vegan)
vmat_sp = tibble(lib_id=rownames(vmat_vegan)) %>%
left_join(select(lib_meta, lib_id, species, site), by="lib_id")
sp = str_replace(vmat_sp$species, " ", "_")
st = vmat_sp$site
lid = vmat_sp$lib_id
hd = as.dist(host_dist[sp,sp])
hd_COI = as.dist(host_dist_COI[lid,lid])
s_d = as.dist(site_dist[st,st])
td = as.dist(time_dist[lid,lid])
tmp_data = data.frame(
VirusDist = as.vector(dist(bc_virus)),
SiteDist = as.vector(dist(s_d)),
HostDist = as.vector(dist(hd)),
HostDistCOI = as.vector(dist(hd_COI)),
TimeDist = as.vector(dist(td)))
mantel(bc_virus ~ hd)
vegan::mantel.partial(bc_virus, hd)
vegan::mantel.partial(bc_virus, hd, s_d)
as.vector(dist(bc_virus))
library(ecodist)
library(tidyverse)
vtable = read_csv("../generated_data/virus_table_filtered.csv") %>%
select_if(function(x) { ifelse(is.character(x), T, sum(x)>0)}) # drop empty columns
vmeta = read_csv("../raw_data/virus_meta.csv")
lib_meta = read_csv("../raw_data/lib_metadata.csv")
virus_name_arr = colnames(select(vtable, -lib_id))
lib_id_arr = vtable$lib_id
vmat = t(select(vtable, all_of(virus_name_arr)))
colnames(vmat) = vtable$lib_id
nonempty_libs = names(which(colSums(vmat)>0))
vmat_ne = vmat[,nonempty_libs]
vmat_vegan = t(vmat_ne)
site_loc = read_csv("../raw_data/geo_locations.csv") %>%
select(-site_name) %>%
as.data.frame()
rownames(site_loc) = site_loc$site
site_loc$site = NULL
site_xy = SoDA::geoXY(site_loc$lat, site_loc$lon, unit=1000) # unit=km
rownames(site_xy) = rownames(site_loc)
site_dist = as.matrix(dist(site_xy))
host_tree = ape::read.tree("../raw_data/bat_tree.nwk")
host_dist = cophenetic(host_tree)/2
host_tree_COI = ape::read.tree("../generated_data/bat_tree_COI_gene.txt")
host_dist_COI = cophenetic(host_tree_COI)
time_dist = as.matrix(dist(lib_meta$year))
rownames(time_dist) = lib_meta$lib_id
colnames(time_dist) = lib_meta$lib_id
bc_virus = bcdist(vmat_vegan)
vmat_sp = tibble(lib_id=rownames(vmat_vegan)) %>%
left_join(select(lib_meta, lib_id, species, site), by="lib_id")
sp = str_replace(vmat_sp$species, " ", "_")
st = vmat_sp$site
lid = vmat_sp$lib_id
hd = as.dist(host_dist[sp,sp])
hd_COI = as.dist(host_dist_COI[lid,lid])
s_d = as.dist(site_dist[st,st])
td = as.dist(time_dist[lid,lid])
hd
nrow(sd)
nrow(s_d)
nrow(hd)
nrow(hd_COI)
mantel(bc_virus ~ hd+s_d,mrank=T)
mantel(bc_virus ~ hd + s_d, mrank=T)
mantel(bc_virus ~ hd, mrank=T)
mantel(bc_virus ~s_d, mrank=T)
nrow(bc_virus)
MRM(VirusDist ~ SiteDist + HostDist + TimeDist, data=tmp_data, nperm=10, mrank=T)
tmp_data = data.frame(
VirusDist = as.vector(dist(bc_virus)),
SiteDist = as.vector(dist(s_d)),
HostDist = as.vector(dist(hd)),
HostDistCOI = as.vector(dist(hd_COI)),
TimeDist = as.vector(dist(td)))
MRM(VirusDist ~ SiteDist + HostDist + TimeDist, data=tmp_data, nperm=10, mrank=T)
MRM(bc_virus ~ hd, nperm=10, mrank=T)
MRM(bc_virus ~ dist(hd), nperm=10, mrank=T)
MRM(as.dist(bc_virus) ~ as.dist(hd), nperm=10, mrank=T)
library(ecodist)
library(tidyverse)
site_loc = read_csv("../raw_data/geo_locations.csv") %>%
select(-site_name) %>%
as.data.frame()
rownames(site_loc) = site_loc$site
site_loc$site = NULL
site_xy = SoDA::geoXY(site_loc$lat, site_loc$lon, unit=1000) # unit=km
rownames(site_xy) = rownames(site_loc)
site_dist = as.matrix(dist(site_xy))
host_tree = ape::read.tree("../raw_data/bat_tree.nwk")
host_dist = cophenetic(host_tree)/2
time_dist = as.matrix(dist(lib_meta$year))
rownames(time_dist) = lib_meta$lib_id
colnames(time_dist) = lib_meta$lib_id
bc_virus = bcdist(vmat_vegan)
vtable = read_csv("../generated_data/virus_table_filtered.csv") %>%
select_if(function(x) { ifelse(is.character(x), T, sum(x)>0)}) # drop empty columns
vmeta = read_csv("../raw_data/virus_meta.csv")
lib_meta = read_csv("../raw_data/lib_metadata.csv")
time_dist = as.matrix(dist(lib_meta$year))
rownames(time_dist) = lib_meta$lib_id
colnames(time_dist) = lib_meta$lib_id
bc_virus = bcdist(vmat_vegan)
vmat_sp = tibble(lib_id=rownames(vmat_vegan)) %>%
left_join(select(lib_meta, lib_id, species, site), by="lib_id")
sp = str_replace(vmat_sp$species, " ", "_")
st = vmat_sp$site
lid = vmat_sp$lib_id
hd = as.dist(host_dist[sp,sp])
=
s_d = as.dist(site_dist[st,st])
td = as.dist(time_dist[lid,lid])
vmat = t(select(vtable, all_of(virus_name_arr)))
colnames(vmat) = vtable$lib_id
nonempty_libs = names(which(colSums(vmat)>0))
vmat_ne = vmat[,nonempty_libs]
vmat_vegan = t(vmat_ne)
vmat = t(select(vtable, all_of(virus_name_arr)))
colnames(vmat) = vtable$lib_id
nonempty_libs = names(which(colSums(vmat)>0))
vmat_ne = vmat[,nonempty_libs]
vmat_vegan = t(vmat_ne)
vtable = read_csv("../generated_data/virus_table_filtered.csv") %>%
select_if(function(x) { ifelse(is.character(x), T, sum(x)>0)}) # drop empty columns
vmeta = read_csv("../raw_data/virus_meta.csv")
lib_meta = read_csv("../raw_data/lib_metadata.csv")
virus_name_arr = colnames(select(vtable, -lib_id))
lib_id_arr = vtable$lib_id
vmat = t(select(vtable, all_of(virus_name_arr)))
colnames(vmat) = vtable$lib_id
nonempty_libs = names(which(colSums(vmat)>0))
vmat_ne = vmat[,nonempty_libs]
vmat_vegan = t(vmat_ne)
site_loc = read_csv("../raw_data/geo_locations.csv") %>%
select(-site_name) %>%
as.data.frame()
rownames(site_loc) = site_loc$site
site_loc$site = NULL
site_xy = SoDA::geoXY(site_loc$lat, site_loc$lon, unit=1000) # unit=km
rownames(site_xy) = rownames(site_loc)
site_dist = as.matrix(dist(site_xy))
host_tree = ape::read.tree("../raw_data/bat_tree.nwk")
host_dist = cophenetic(host_tree)/2
time_dist = as.matrix(dist(lib_meta$year))
rownames(time_dist) = lib_meta$lib_id
colnames(time_dist) = lib_meta$lib_id
bc_virus = bcdist(vmat_vegan)
vmat_sp = tibble(lib_id=rownames(vmat_vegan)) %>%
left_join(select(lib_meta, lib_id, species, site), by="lib_id")
sp = str_replace(vmat_sp$species, " ", "_")
st = vmat_sp$site
lid = vmat_sp$lib_id
hd = as.dist(host_dist[sp,sp])
s_d = as.dist(site_dist[st,st])
td = as.dist(time_dist[lid,lid])
mantel(bc_virus ~ host_dist)
mantel(bc_virus ~ hd)
hd
bc_virus
mantel(as.vector(bc_virus) ~ as.vector(hd))
site_loc = read_csv("../raw_data/geo_locations.csv") %>%
select(-site_name) %>%
as.data.frame()
rownames(site_loc) = site_loc$site
site_loc$site = NULL
site_xy = SoDA::geoXY(site_loc$lat, site_loc$lon, unit=1000) # unit=km
rownames(site_xy) = rownames(site_loc)
site_dist = as.matrix(dist(site_xy))
host_tree = ape::read.tree("../raw_data/bat_tree.nwk")
host_dist = cophenetic(host_tree)/2
host_tree_COI = ape::read.tree("../generated_data/bat_tree_COI_gene.txt")
host_dist_COI = cophenetic(host_tree_COI)
time_dist = as.matrix(dist(lib_meta$year))
rownames(time_dist) = lib_meta$lib_id
colnames(time_dist) = lib_meta$lib_id
bc_virus = bcdist(vmat_vegan)
vmat_sp = tibble(lib_id=rownames(vmat_vegan)) %>%
left_join(select(lib_meta, lib_id, species, site), by="lib_id")
sp = str_replace(vmat_sp$species, " ", "_")
st = vmat_sp$site
lid = vmat_sp$lib_id
hd = as.dist(host_dist[sp,sp])
hd_COI = as.dist(host_dist_COI[lid,lid])
s_d = as.dist(site_dist[st,st])
td = as.dist(time_dist[lid,lid])
tmp_data = data.frame(
VirusDist = as.vector(bc_virus),
SiteDist = as.vector(s_d),
HostDist = as.vector(hd),
HostDistCOI = as.vector(hd_COI),
TimeDist = as.vector(td))
mantel(VirusDist ~ SiteDist + HostDist + TimeDist, data=tmp_data, mrank=T)
source("~/Documents/GitHub/Bat_Infectome/R/eval_beta_diversity.R")
source("~/Documents/GitHub/Bat_Infectome/R/eval_beta_diversity.R")
tmp_data = data.frame(
VirusDist = as.vector(bc_virus),
SiteDist = as.vector(s_d),
HostDist = as.vector(hd),
HostDistCOI = as.vector(hd_COI),
TimeDist = as.vector(td)
)
mantel
source("~/Documents/GitHub/Bat_Infectome/R/eval_beta_diversity.R")
# This script do the RPM calculation and index-hopping correction
# The assumed work dir is <project_root>/R
library(tidyverse)
reads_mapping = read_csv("../raw_data/0907_mapping.csv")
name_mapping = read_csv("../raw_data/virus_name_mapping_0907.csv")
reads_mapping = left_join(name_mapping, reads_mapping, by="virus_strain_name") %>%
select(-virus_strain_name) %>%
group_by(virus_name) %>%
summarise_all(sum) %>%
ungroup()
lane_id_table = read_csv("../generated_data/lane_id_table.csv")
lane_id_table
library(tidyverse)
reads_mapping = read_csv("../raw_data/0907_mapping.csv")
name_mapping = read_csv("../raw_data/virus_name_mapping_0907.csv")
reads_mapping = left_join(name_mapping, reads_mapping, by="virus_strain_name") %>%
select(-virus_strain_name) %>%
group_by(virus_name) %>%
summarise_all(sum) %>%
ungroup()
lane_id_table = read_csv("../generated_data/lane_id_table.csv")
virus_name_arr = reads_mapping$virus_name
lib_id_arr = colnames(select(reads_mapping, -virus_name))
reads_mapping_t = reads_mapping %>%
select(-virus_name) %>%
t() %>%
as.data.frame() %>%
as_tibble() %>%
mutate(lib_id = lib_id_arr, .before=1)
colnames(reads_mapping_t) = c("lib_id", virus_name_arr)
reads_mapping_t
reads_mapping
# This script do the RPM calculation and index-hopping correction
# The assumed work dir is <project_root>/R
library(tidyverse)
reads_mapping = read_csv("../raw_data/0907_mapping.csv")
name_mapping = read_csv("../raw_data/virus_name_mapping_0907.csv")
reads_mapping = left_join(name_mapping, reads_mapping, by="virus_strain_name") %>%
select(-virus_strain_name) %>%
group_by(virus_name) %>%
summarise_all(sum) %>%
ungroup()
lane_id_table = read_csv("../generated_data/lane_id_table.csv")
reads_mapping
write_csv("../data/raw_reads_mapping.csv")
write_csv(reads_mapping, "../data/raw_reads_mapping.csv")
write_csv(reads_mapping, "../raw_data/raw_reads_mapping.csv")
# This script do the RPM calculation and index-hopping correction
# The assumed work dir is <project_root>/R
library(tidyverse)
#reads_mapping = read_csv("../raw_data/0907_mapping.csv")
#name_mapping = read_csv("../raw_data/virus_name_mapping_0907.csv")
#reads_mapping = left_join(name_mapping, reads_mapping, by="virus_strain_name") %>%
#    select(-virus_strain_name) %>%
#    group_by(virus_name) %>%
#    summarise_all(sum) %>%
#    ungroup()
reads_mapping = read_csv("../data/raw_reads_mapping.csv")
lane_id_table = read_csv("../generated_data/lane_id_table.csv")
# Transpose the table
virus_name_arr = reads_mapping$virus_name
lib_id_arr = colnames(select(reads_mapping, -virus_name))
reads_mapping_t = reads_mapping %>%
select(-virus_name) %>%
t() %>%
as.data.frame() %>%
as_tibble() %>%
mutate(lib_id = lib_id_arr, .before=1)
reads_mapping_t
# This script do the RPM calculation and index-hopping correction
# The assumed work dir is <project_root>/R
library(tidyverse)
#reads_mapping = read_csv("../raw_data/0907_mapping.csv")
#name_mapping = read_csv("../raw_data/virus_name_mapping_0907.csv")
#reads_mapping = left_join(name_mapping, reads_mapping, by="virus_strain_name") %>%
#    select(-virus_strain_name) %>%
#    group_by(virus_name) %>%
#    summarise_all(sum) %>%
#    ungroup()
reads_mapping = read_csv("../data/raw_reads_mapping.csv")
lane_id_table = read_csv("../generated_data/lane_id_table.csv")
# Transpose the table
virus_name_arr = reads_mapping$virus_name
lib_id_arr = colnames(select(reads_mapping, -virus_name))
reads_mapping_t = reads_mapping %>%
select(-virus_name) %>%
t() %>%
as.data.frame() %>%
as_tibble() %>%
mutate(lib_id = lib_id_arr, .before=1)
colnames(reads_mapping_t) = c("lib_id", virus_name_arr)
reads_mapping_t
source("~/Documents/GitHub/Individual_Bat_Virome/R/virus_table_cleaning.R")
source("~/Documents/GitHub/Individual_Bat_Virome/R/draw_virus_heatmap.R")
source("~/Documents/GitHub/Individual_Bat_Virome/R/virus_table_cleaning.R")
source("~/Documents/GitHub/Individual_Bat_Virome/R/draw_virus_heatmap.R")
source("~/Documents/GitHub/Individual_Bat_Virome/R/eval_alpha_diversity.R")
source("~/Documents/GitHub/Individual_Bat_Virome/R/eval_CST.R")
source("~/Documents/GitHub/Individual_Bat_Virome/R/eval_CST.R")
source("~/Documents/GitHub/Individual_Bat_Virome/R/eval_alpha_diversity.R")
vmat
t(vmat)
diversity(t(vmat))
diversity
detach("package:igraph", unload = TRUE)
source("~/Documents/GitHub/Individual_Bat_Virome/R/eval_alpha_diversity.R")
source("~/Documents/GitHub/Individual_Bat_Virome/R/eval_beta_diversity.R")
source("~/Documents/GitHub/Individual_Bat_Virome/R/eval_beta_diversity.R")
